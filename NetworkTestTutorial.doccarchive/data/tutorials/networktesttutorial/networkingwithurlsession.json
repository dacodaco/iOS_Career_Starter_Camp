{"metadata":{"title":"Configure default files for communication","categoryPathComponent":"Tutorial-Table-of-Contents","role":"project","category":""},"hierarchy":{"modules":[{"reference":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/Tutorial-Table-of-Contents\/Networking-with-URLSession","projects":[{"reference":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/NetworkingWithURLSession","sections":[{"kind":"task","reference":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/NetworkingWithURLSession#Make-files-for-Networking"}]}]},{"reference":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/Tutorial-Table-of-Contents\/How-To-Test-My-Code","projects":[{"reference":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/HowToTestMyCode","sections":[{"kind":"task","reference":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/HowToTestMyCode#text"}]}]},{"reference":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/Tutorial-Table-of-Contents\/Test-Without-Networking","projects":[{"reference":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/TestWithoutNetworking","sections":[{"kind":"task","reference":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/TestWithoutNetworking#text"}]}]}],"reference":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/Tutorial-Table-of-Contents","paths":[["doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/Tutorial-Table-of-Contents\/$volume","doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/Tutorial-Table-of-Contents\/Networking-with-URLSession"]]},"schemaVersion":{"major":0,"minor":1,"patch":0},"kind":"project","identifier":{"url":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/NetworkingWithURLSession","interfaceLanguage":"swift"},"sections":[{"kind":"hero","title":"Configure default files for communication","chapter":"Networking with URLSession","estimatedTimeInMinutes":20,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Configuring default files for networking is essential for communication between servers and clients."}]}]},{"kind":"tasks","tasks":[{"anchor":"Make-files-for-Networking","title":"Make files for Networking","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To communicate with the server, you must send a request to the server in a prescribed format. In addition, the model type must be configured to store the data received from the server."}]}],"mediaPosition":"trailing","layout":"horizontal"}],"stepsSection":[{"code":"NetworkingWithURLSession-Section1-Step1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First, create a JokesAPI type that contains the server’s address and sample data for testing."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"NetworkingWithURLSession-Section1-Step2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assign the server url to a static variable."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"NetworkingWithURLSession-Section1-Step3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create and allocate sample data to ensure that the JSON file to be imported from the server is properly decoded."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"NetworkingWithURLSession-Section1-Step4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s create a class to communicate with the server. You must create a JokesAPIProvider that can handle JSON files from the server."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"NetworkingWithURLSession-Section1-Step5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An instance of URLSession type is required for data communication. We will assign an instance to a constant called session."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s configure the initializer to assign a URL Session instance when initializing the JokesAPIProvider type."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"NetworkingWithURLSession-Section1-Step6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This method receives and handles data from the server and passes the result to the completion closure with Result type Instance which has associated value."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"NetworkingWithURLSession-Section1-Step7.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create and allocate sample data to ensure that the JSON file to be imported from the server is properly decoded."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"NetworkingWithURLSession-Section1-Step8.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create and allocate sample data to ensure that the JSON file to be imported from the server is properly decoded."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"NetworkingWithURLSession-Section1-Step9.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create and allocate sample data to ensure that the JSON file to be imported from the server is properly decoded."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"NetworkingWithURLSession-Section1-Step10.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create and allocate sample data to ensure that the JSON file to be imported from the server is properly decoded."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"NetworkingWithURLSession-Section1-Step11.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create and allocate sample data to ensure that the JSON file to be imported from the server is properly decoded."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"NetworkingWithURLSession-Section1-Step12.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create and allocate sample data to ensure that the JSON file to be imported from the server is properly decoded."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"NetworkingWithURLSession-Section1-Step13.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create and allocate sample data to ensure that the JSON file to be imported from the server is properly decoded."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/HowToTestMyCode","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"<#text#>","abstract":[{"type":"text","text":"<#text#>"}]}],"references":{"NetworkingWithURLSession-Section1-Step5.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {","    static var url = URL(string: \"https:\/\/api.icndb.com\/jokes\/random\")!","    var sampleData: Data {","        Data(","            \"\"\"","            {","                \"type\": \"success\",","                    \"value\": {","                    \"id\": 459,","                    \"joke\": \"Chuck Norris can solve the Towers of Hanoi in one move.\",","                    \"categories\": []","                }","            }","            \"\"\".utf8","        )","    }","}","","class JokesAPIProvider {","    let session: URLSession","    ","    init(session: URLSession){","        self.session = session","    }","}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step5.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}]},"doc://net.dacodaco.NetworkTestTutorial/tutorials/NetworkTestTutorial/NetworkingWithURLSession":{"role":"project","title":"Configure default files for communication","estimatedTime":"20분","abstract":[{"type":"text","text":"Configuring default files for networking is essential for communication between servers and clients."}],"identifier":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/NetworkingWithURLSession","kind":"project","type":"topic","url":"\/tutorials\/networktesttutorial\/networkingwithurlsession"},"doc://net.dacodaco.NetworkTestTutorial/tutorials/NetworkTestTutorial/TestWithoutNetworking#text":{"role":"pseudoSymbol","title":"<#text#>","abstract":[{"type":"text","text":"<#text#>"}],"identifier":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/TestWithoutNetworking#text","kind":"section","type":"section","url":"\/tutorials\/networktesttutorial\/testwithoutnetworking#text"},"NetworkingWithURLSession-Section1-Step12.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {","    static var url = URL(string: \"https:\/\/api.icndb.com\/jokes\/random\")!","    var sampleData: Data {","        Data(","            \"\"\"","            {","                \"type\": \"success\",","                    \"value\": {","                    \"id\": 459,","                    \"joke\": \"Chuck Norris can solve the Towers of Hanoi in one move.\",","                    \"categories\": []","                }","            }","            \"\"\".utf8","        )","    }","}","","class JokesAPIProvider {","    let session: URLSession","    ","    init(session: URLSession){","        self.session = session","    }","    ","    func fetchRandomJoke(completion: @escaping(Result<Joke, APIError>) -> Void) {","        let request = URLRequest(url: JokesAPI.url)","        ","        let task: URLSessionDataTask = session.dataTask(with: request) { data, response, error in","            if let error = error {","                completion(.failure(.unknownError))","            }","            ","            guard let response = response as? HTTPURLResponse,","                  (200...299).contains(response.statusCode) else {","                completion(.failure(.unknownError))","                return","            }","            ","            if let data = data,","               let jokeResponse = try? JSONDecoder().decode(JokeReponse.self, from: data) {","                completion(.success(jokeResponse.value))","                return","            }","            ","            completion(.failure(.unknownError))","        }","        ","        task.resume()","    }","}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step12.swift","type":"file","fileType":"swift","highlights":[{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48}]},"doc://net.dacodaco.NetworkTestTutorial/tutorials/Tutorial-Table-of-Contents/How-To-Test-My-Code":{"role":"article","title":"How To Test My Code","abstract":[],"identifier":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/Tutorial-Table-of-Contents\/How-To-Test-My-Code","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/how-to-test-my-code"},"doc://net.dacodaco.NetworkTestTutorial/tutorials/NetworkTestTutorial/NetworkingWithURLSession#Make-files-for-Networking":{"role":"pseudoSymbol","title":"Make files for Networking","abstract":[{"type":"text","text":"Configuring default files for networking is essential for communication between servers and clients."}],"identifier":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/NetworkingWithURLSession#Make-files-for-Networking","kind":"section","type":"section","url":"\/tutorials\/networktesttutorial\/networkingwithurlsession#Make-files-for-Networking"},"doc://net.dacodaco.NetworkTestTutorial/tutorials/Tutorial-Table-of-Contents/Test-Without-Networking":{"role":"article","title":"Test Without Networking","abstract":[],"identifier":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/Tutorial-Table-of-Contents\/Test-Without-Networking","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/test-without-networking"},"NetworkingWithURLSession-Section1-Step11.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {","    static var url = URL(string: \"https:\/\/api.icndb.com\/jokes\/random\")!","    var sampleData: Data {","        Data(","            \"\"\"","            {","                \"type\": \"success\",","                    \"value\": {","                    \"id\": 459,","                    \"joke\": \"Chuck Norris can solve the Towers of Hanoi in one move.\",","                    \"categories\": []","                }","            }","            \"\"\".utf8","        )","    }","}","","class JokesAPIProvider {","    let session: URLSession","    ","    init(session: URLSession){","        self.session = session","    }","    ","    func fetchRandomJoke(completion: @escaping(Result<Joke, APIError>) -> Void) {","        let request = URLRequest(url: JokesAPI.url)","        ","        let task: URLSessionDataTask = session.dataTask(with: request) { data, response, error in","            if let error = error {","                completion(.failure(.unknownError))","            }","            ","            guard let response = response as? HTTPURLResponse,","                  (200...299).contains(response.statusCode) else {","                completion(.failure(.unknownError))","                return","            }","        }","        ","        task.resume()","    }","}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step11.swift","type":"file","fileType":"swift","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40}]},"NetworkingWithURLSession-Section1-Step8.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {","    static var url = URL(string: \"https:\/\/api.icndb.com\/jokes\/random\")!","    var sampleData: Data {","        Data(","            \"\"\"","            {","                \"type\": \"success\",","                    \"value\": {","                    \"id\": 459,","                    \"joke\": \"Chuck Norris can solve the Towers of Hanoi in one move.\",","                    \"categories\": []","                }","            }","            \"\"\".utf8","        )","    }","}","","class JokesAPIProvider {","    let session: URLSession","    ","    init(session: URLSession){","        self.session = session","    }","    ","    func fetchRandomJoke(completion: @escaping(Result<Joke, APIError>) -> Void) {","        let request = URLRequest(url: JokesAPI.url)","","        let task: URLSessionDataTask = session.dataTask(with: request) {}","        ","        task.resume()","    }","}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step8.swift","type":"file","fileType":"swift","highlights":[{"line":30},{"line":31},{"line":32},{"line":33}]},"NetworkingWithURLSession-Section1-Step9.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {","    static var url = URL(string: \"https:\/\/api.icndb.com\/jokes\/random\")!","    var sampleData: Data {","        Data(","            \"\"\"","            {","                \"type\": \"success\",","                    \"value\": {","                    \"id\": 459,","                    \"joke\": \"Chuck Norris can solve the Towers of Hanoi in one move.\",","                    \"categories\": []","                }","            }","            \"\"\".utf8","        )","    }","}","","class JokesAPIProvider {","    let session: URLSession","    ","    init(session: URLSession){","        self.session = session","    }","    ","    func fetchRandomJoke(completion: @escaping(Result<Joke, APIError>) -> Void) {","        let request = URLRequest(url: JokesAPI.url)","        ","        let task: URLSessionDataTask = session.dataTask(with: request) { data, response, error in","        }","        ","        task.resume()","    }","}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step9.swift","type":"file","fileType":"swift","highlights":[{"line":31},{"line":32},{"line":33}]},"NetworkingWithURLSession-Section1-Step3.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {","    static var url = URL(string: \"https:\/\/api.icndb.com\/jokes\/random\")!","    var sampleData: Data {","        Data(","            \"\"\"","            {","                \"type\": \"success\",","                    \"value\": {","                    \"id\": 459,","                    \"joke\": \"Chuck Norris can solve the Towers of Hanoi in one move.\",","                    \"categories\": []","                }","            }","            \"\"\".utf8","        )","    }","}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step3.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18}]},"NetworkingWithURLSession-Section1-Step1.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step1.swift","type":"file","fileType":"swift","highlights":[]},"NetworkingWithURLSession-Section1-Step6.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {","    static var url = URL(string: \"https:\/\/api.icndb.com\/jokes\/random\")!","    var sampleData: Data {","        Data(","            \"\"\"","            {","                \"type\": \"success\",","                    \"value\": {","                    \"id\": 459,","                    \"joke\": \"Chuck Norris can solve the Towers of Hanoi in one move.\",","                    \"categories\": []","                }","            }","            \"\"\".utf8","        )","    }","}","","class JokesAPIProvider {","    let session: URLSession","    ","    init(session: URLSession){","        self.session = session","    }","    ","    func fetchRandomJoke(completion: @escaping(Result<Joke, APIError>) -> Void) {}","}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step6.swift","type":"file","fileType":"swift","highlights":[{"line":27},{"line":28}]},"doc://net.dacodaco.NetworkTestTutorial/tutorials/Tutorial-Table-of-Contents/Networking-with-URLSession":{"role":"article","title":"Networking with URLSession","abstract":[],"identifier":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/Tutorial-Table-of-Contents\/Networking-with-URLSession","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/networking-with-urlsession"},"doc://net.dacodaco.NetworkTestTutorial/tutorials/NetworkTestTutorial/TestWithoutNetworking":{"role":"project","title":"<#text#>","abstract":[{"type":"text","text":"<#text#>"}],"identifier":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/TestWithoutNetworking","kind":"project","type":"topic","url":"\/tutorials\/networktesttutorial\/testwithoutnetworking"},"NetworkingWithURLSession-Section1-Step10.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {","    static var url = URL(string: \"https:\/\/api.icndb.com\/jokes\/random\")!","    var sampleData: Data {","        Data(","            \"\"\"","            {","                \"type\": \"success\",","                    \"value\": {","                    \"id\": 459,","                    \"joke\": \"Chuck Norris can solve the Towers of Hanoi in one move.\",","                    \"categories\": []","                }","            }","            \"\"\".utf8","        )","    }","}","","class JokesAPIProvider {","    let session: URLSession","    ","    init(session: URLSession){","        self.session = session","    }","    ","    func fetchRandomJoke(completion: @escaping(Result<Joke, APIError>) -> Void) {","        let request = URLRequest(url: JokesAPI.url)","        ","        let task: URLSessionDataTask = session.dataTask(with: request) { data, response, error in","            if let error = error {","                completion(.failure(.unknownError))","            }","        }","        ","        task.resume()","    }","}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step10.swift","type":"file","fileType":"swift","highlights":[{"line":32},{"line":33},{"line":34}]},"NetworkingWithURLSession-Section1-Step13.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {","    static var url = URL(string: \"https:\/\/api.icndb.com\/jokes\/random\")!","    var sampleData: Data {","        Data(","            \"\"\"","            {","                \"type\": \"success\",","                    \"value\": {","                    \"id\": 459,","                    \"joke\": \"Chuck Norris can solve the Towers of Hanoi in one move.\",","                    \"categories\": []","                }","            }","            \"\"\".utf8","        )","    }","}","","class JokesAPIProvider {","    let session: URLSession","    ","    init(session: URLSession){","        self.session = session","    }","    ","    func fetchRandomJoke(completion: @escaping(Result<Joke, APIError>) -> Void) {","        let request = URLRequest(url: JokesAPI.url)","        ","        let task: URLSessionDataTask = session.dataTask(with: request) { data, response, error in","            if let error = error {","                completion(.failure(.unknownError))","            }","            ","            guard let response = response as? HTTPURLResponse,","                  (200...299).contains(response.statusCode) else {","                completion(.failure(.unknownError))","                return","            }","            ","            if let data = data,","               let jokeResponse = try? JSONDecoder().decode(JokeReponse.self, from: data) {","                completion(.success(jokeResponse.value))","                return","            }","            ","            completion(.failure(.unknownError))","        }","        ","        task.resume()","    }","}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step13.swift","type":"file","fileType":"swift","highlights":[]},"doc://net.dacodaco.NetworkTestTutorial/tutorials/Tutorial-Table-of-Contents":{"role":"overview","title":"Test without Networking","abstract":[{"type":"text","text":"URLSession을 활용해 네트워크 작업을 진행하다보면 예상치 못한 상황에 직면하는 경우가 있습니다."},{"type":"text","text":" "},{"type":"text","text":"예를 들어 우리가 서버와 소통하는 과정에서 오류가 발생했다고 생각해봅시다."},{"type":"text","text":" "},{"type":"text","text":"우리는 그 문제의 원인이 서버에 있는 것인지, 내가 처리하는 방식에 있는 것인지 알 수 없을 것입니다."},{"type":"text","text":" "},{"type":"text","text":"이와 같은 문제를 해결하기 위해서 우리는 네트워크와 무관하게 우리의 코드를 테스트하는 방법을 고민해볼 필요가 있습니다."}],"identifier":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/Tutorial-Table-of-Contents","kind":"overview","type":"topic","url":"\/tutorials\/tutorial-table-of-contents"},"NetworkingWithURLSession-Section1-Step7.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {","    static var url = URL(string: \"https:\/\/api.icndb.com\/jokes\/random\")!","    var sampleData: Data {","        Data(","            \"\"\"","            {","                \"type\": \"success\",","                    \"value\": {","                    \"id\": 459,","                    \"joke\": \"Chuck Norris can solve the Towers of Hanoi in one move.\",","                    \"categories\": []","                }","            }","            \"\"\".utf8","        )","    }","}","","class JokesAPIProvider {","    let session: URLSession","    ","    init(session: URLSession){","        self.session = session","    }","    ","    func fetchRandomJoke(completion: @escaping(Result<Joke, APIError>) -> Void) {","        let request = URLRequest(url: JokesAPI.url)","    }","}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step7.swift","type":"file","fileType":"swift","highlights":[{"line":28},{"line":29},{"line":30}]},"doc://net.dacodaco.NetworkTestTutorial/tutorials/NetworkTestTutorial/HowToTestMyCode":{"role":"project","title":"<#text#>","abstract":[{"type":"text","text":"<#text#>"}],"identifier":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/HowToTestMyCode","kind":"project","type":"topic","url":"\/tutorials\/networktesttutorial\/howtotestmycode"},"NetworkingWithURLSession-Section1-Step2.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {","    static var url = URL(string: \"https:\/\/api.icndb.com\/jokes\/random\")!","}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step2.swift","type":"file","fileType":"swift","highlights":[{"line":3},{"line":4},{"line":5}]},"NetworkingWithURLSession-Section1-Step4.swift":{"syntax":"swift","content":["import Foundation","","struct JokesAPI {","    static var url = URL(string: \"https:\/\/api.icndb.com\/jokes\/random\")!","    var sampleData: Data {","        Data(","            \"\"\"","            {","                \"type\": \"success\",","                    \"value\": {","                    \"id\": 459,","                    \"joke\": \"Chuck Norris can solve the Towers of Hanoi in one move.\",","                    \"categories\": []","                }","            }","            \"\"\".utf8","        )","    }","}","","class JokesAPIProvider {}"],"fileName":"JokesAPI.swift","identifier":"NetworkingWithURLSession-Section1-Step4.swift","type":"file","fileType":"swift","highlights":[{"line":20},{"line":21}]},"doc://net.dacodaco.NetworkTestTutorial/tutorials/NetworkTestTutorial/HowToTestMyCode#text":{"role":"pseudoSymbol","title":"<#text#>","abstract":[{"type":"text","text":"<#text#>"}],"identifier":"doc:\/\/net.dacodaco.NetworkTestTutorial\/tutorials\/NetworkTestTutorial\/HowToTestMyCode#text","kind":"section","type":"section","url":"\/tutorials\/networktesttutorial\/howtotestmycode#text"}}}