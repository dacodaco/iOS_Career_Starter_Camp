@Tutorial(time: 20) {
    @Intro(title: "Configure files for API") {
        Configuring default files for networking is essential for communication between servers and clients.
    }
    
    @Section(title: "Make JokesAPI class") {
        @ContentAndMedia(layout: horizontal) {
        To communicate with the server, you must send a request to the server in a prescribed format. In addition, the model type must be configured to store the data received from the server.
        }
        
        @Steps {
            @Step {
                First, create a JokesAPI type that contains the server's address and sample data for testing. 
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step1.swift")
            }
            
            @Step {
                Assign the server url to a static variable.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step2.swift")
            }
            
            @Step {
                Create and allocate sample data to ensure that the JSON file to be imported from the server is properly decoded.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step3.swift")
            }
            
            @Step {
                Now let's create a class to communicate with the server. You must create a JokesAPIProvider that can handle JSON files from the server.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step4.swift")
            }
            
            @Step {
                An instance of URLSession type is required for data communication. We will assign an instance to a constant called session.

                Let's configure the initializer to assign a URL Session instance when initializing the JokesAPIProvider type.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step5.swift")
            }
            
            @Step {
                This method receives data from the server
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step6.swift")
            }
            
            @Step {
                Creates a 'request' constant for requesting to the server.

                Use 'URLRequest(url:)' because the server uses GET requests only. We take advantage of the 'url' static variable in JokesAPI.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step7.swift")
            }
            
            @Step {
                Generates a task constant(URLSessionDataTask class) that actually sends requests to the server.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step8.swift")
            }
            
            @Step {
                Define the completion closure of the URLSessionDataTask. The arguments that enter the closure are the values passed from the server.


                The closure corresponding to the completion has the following parameters of types: such as 'Data?', 'HTTPURLResponse?', and 'Error?'
                                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step9.swift")
            }
            
            @Step {
                First, make sure that the 'error' parameter that you received have values.
                If there is a value, it means that an error has occurred.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step10.swift")
            }
            
            @Step {
                Second, make sure that 'response' is the HTTPURLResponse type. If that type is correct, check if the status code is from 200 to 299.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step11.swift")
            }
            
            @Step {
                Third, make sure 'data' has a value, and decode the data to the JokeResponse type.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step12.swift")
            }
            
            @Step {
                As a result, we can check for errors or receive decoded information through this method. To deal with these results, we will make the 'fetchRandomJoke()' method have a completion closure.
                
                At this point, the completion closure sets the Result type to be received as a parameter to handle both errors and data.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step13.swift")
            }
            
            @Step {
                For each situation, determine whether the result is 'success' or 'failure' and pass it to the completion.
                
                Since the error type has not been made yet, it does not specify the type of error.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section1-Step14.swift")
            }
        }
    }
        
    @Section(title: "Make ErrorType") {
        @ContentAndMedia(layout: horizontal) {
            In the event of an error, it is important to distinguish each error and create an error type for different handling.
        }
        
        @Steps {
            @Step {
                First, create a APIError enum type
                
                @Code(name: "APIError.swift", file: "NetworkingWithURLSession-Section2-Step1.swift")
            }
            
            @Step {
                Create an error case for each situation.
                
                @Code(name: "APIError.swift", file: "NetworkingWithURLSession-Section2-Step2.swift")
            }
            
            @Step {
                Back to JokesAPI.swift file
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section2-Step3.swift")
            }
            
            @Step {
                Modify to allow completion closure in JokesAPI's fetchRandomJoke method to return APIError type.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-Section2-Step4.swift")
            }
        }
    }
}
