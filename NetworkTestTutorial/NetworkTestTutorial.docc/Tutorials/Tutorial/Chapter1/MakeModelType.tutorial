@Tutorial(time: 20) {
    @Intro(title: "Create Model type") {
        To decode JSON data received from the server, you need a template to contain it. We call this template a model type.
    }
    
    @Section(title: "create model type while checking JSON structure") {
        @ContentAndMedia(layout: horizontal) {
            You need to know what JSON Data looks like to be imported from the server so that you can get the right model type.
        }
        
        @Steps {
            @Step {
                We already have data written down in the 'sampleData' variable. 
                
                This shows that the data from the server has the top key 'type' and 'value' and that the lower key corresponding to value has 'id', 'joke', and 'categories'.
                
                @Code(name: "JokesAPI.swift", file: "NetworkingWithURLSession-MakeModel-Section1-Step1.swift") 
            }
            
            @Step {
                The type that will be the template for decoding data is called the model type. Creates a file for the model type and creates a structure.
                
                @Code(name: "PlaceHolder.swift", file: "NetworkingWithURLSession-MakeModel-Section1-Step2.swift") {
                    @Image(source: preview-JSON.jpg)
                }
            }
            
            @Step {
                Create a model type 'JokeResponse' that can hold the parent key.

                Let's keep in mind that the type of 'value' is the Jake structure.
                
                @Code(name: "PlaceHolder.swift", file: "NetworkingWithURLSession-MakeModel-Section1-Step3.swift") {
                    @Image(source: preview-JSON.jpg)
                }
            }
            
            @Step {
                Joke and JokeResponse should be a type that can decode typical JSON data. So let's adopt the Decodable protocol.

                @Code(name: "PlaceHolder.swift", file: "NetworkingWithURLSession-MakeModel-Section1-Step4.swift") {
                    @Image(source: preview-Decodable.jpg)
                }
            }
            
            @Step {
                When you adopt the Decodable protocol, type can decode itself from an external representation.
                
                There is also a method of adopting the Codable protocol, but in this case, we adopted Decodable because it is a type only for decoding.
                
                @Image(source: overview-DecodableExclusive.jpg)
            }
        }
    }
        
        
            
    @Section(title: "Verify model type can parse JSON data") { 
        @ContentAndMedia(layout: horizontal) {
            It is necessary to check if the model type that was created can actually parse JSON data.
        }
        
        @Steps {
            @Step {
                When a project is created, the test file is created with it by default. The logics we create are tested through the internal methods of this file.
                
                @Code(name: "NetworkTestTutorialTests.swift", file: "NetworkingWithURLSession-MakeModel-Section2-Step1.swift") {
                    @Image(source: preview-verify1.jpg)
                }
            }
            
            @Step {
                Clears the already implemented methods and creates a method to verify that the data is parsed well.                
                @Code(name: "NetworkTestTutorialTests.swift", file: "NetworkingWithURLSession-MakeModel-Section2-Step2.swift")
            }
            
            @Step {
                To utilize sample JSON data, we create instances of JokesAPI type and assign the data to constants.                
                @Code(name: "NetworkTestTutorialTests.swift", file: "NetworkingWithURLSession-MakeModel-Section2-Step3.swift")
            }
            
            @Step {
                Create an instance of the JSONDecoder type for decoing JSON. After decode the data, store it in a parsedData constant.
                
                If the data is not decoded, XCTfail() will notify you that the test has failed. 
                
                @Code(name: "NetworkTestTutorialTests.swift", file: "NetworkingWithURLSession-MakeModel-Section2-Step4.swift")
            }
            
            @Step {
                XCTAsertEqual indicates the success of the test if the values of left and right sides are the same, and if different, the test fails.
                
                We checked that the value of the key 'type' in the data is properly decoded. Therefore, it has been proved that there is no problem with our model type.
                @Code(name: "NetworkTestTutorialTests.swift", file: "NetworkingWithURLSession-MakeModel-Section2-Step5.swift")
            }
            
            @Step {
                If you test it, you will see that you have been notified that you have succeeded.
                
                @Code(name: "NetworkTestTutorialTests.swift", file: "NetworkingWithURLSession-MakeModel-Section2-Step6.swift") {
                    @Image(source: preview-verify2.jpg)
                }
            }
        }
    } 
}
