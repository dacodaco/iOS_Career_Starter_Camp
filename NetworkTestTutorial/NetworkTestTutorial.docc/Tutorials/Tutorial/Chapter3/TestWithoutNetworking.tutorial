@Tutorial(time: 20) {
    @Intro(title: "Prepare for Test without Networking") {
        Prepare tests that do not depend on the network state.
    }
    
    @Section(title: "Limits of testing over the network") {
        @ContentAndMedia(layout: horizontal) {
            Testing over the network has the advantage of being in the same state as it is in reality. However, there is also a disadvantage that it is difficult to find the cause of the error when it occurs.
            
        }
        
        @Steps {
            @Step {
                Suppose an error occurred in the fetchRandomJoke() method. Can we find out from the test whether the problem occurred on the server or in the completion closure of the dataTask? I don't think so.
                
                @Code(name: "JokesAPI.swift", file: Limits-Section1-Step1.swift)
            }
            
            @Step {
                This is because the response is received from the server with the call of the response() method and the completion action is performed at once.
                
                @Image(source: Limits-Section1-Step2.png)
            }
            
            @Step {
                If either the completion or server operations have errors, the resume() method will have errors.

                @Image(source: Limits-Section1-Step3.png)
            }
            
            @Step {
                Therefore, we need to create a new MockURLSession that exports fixed data without going through the server, enabling network-independent testing.
                
                @Image(source: Limits-Section1-Step4.png)
            }
            
            @Step {
                It also allows the creation of a parent protocol (URLSession Protocol) so that these two can be used alternately in the same situation.
                
                @Image(source: Limits-Section1-Step5.png)
            }
        }
    }
    
    @Section(title: "Make Protocol and Adopt it") {
        @ContentAndMedia(layout: horizontal) {
            Create a URL Session Protocol and allow each type to adopt it.
        }
        
        @Steps {
            @Step {
                First, create a file for URLSessionProtocol.
                
                @Code(name: "Protocol.swift", file: "Make-Section1-Step1.swift")
            }
            
            @Step {
                The types to adopt URLSessionProtocol are URLSession and MockURLSession. The types to adopt URLSessionProtocol are URLSession and MockURLSession. What they have in common is that they use a method called dataTask.
                
                @Code(name: "Protocol.swift", file: "Make-Section1-Step2.swift")
            }
            
            @Step {
                First, allow the URLSession type to adopt the URLSessionProtocol.
                
                @Code(name: "Protocol.swift", file: "Make-Section1-Step3.swift")
            }
            
            @Step {
                Create a Mock file in the Test folder and write down two Mock files to create.
                
                At this point, an error occurs because MockURLSession has adopted URLSessionProtocol. Press the Fix button to see which protocol stub you need.
                @Code(name: "Mock.swift", file: "Make-Section1-Step4.swift") {
                    @Image(source: Make-Section-Step4.jpg)
                }
            }
            
            @Step {
                Ta-da! It was a dataTask(with:completeionHandler:).
                
                @Code(name: "Mock.swift", file: "Make-Section1-Step5.swift")
            }
        }
    }
}
